name: "Example CI"

on:
  push:
    branches:
      - main
    paths:
      - "terraform/environments/example/**"
      - ".github/workflows/example_ci.yaml"
  pull_request:
    branches:
      - main
    paths:
      - "terraform/environments/example/**"
      - ".github/workflows/example_ci.yaml"

jobs:
  terraform-static-analysis:
    permissions:
      contents: read
      pull-requests: write
    name: "🛡️Terraform Static Analysis"
    runs-on: ubuntu-latest
    # Ensure that the static analysis is performed only when there is a pull request
    if: ${{ contains(github.event, 'pull_request') }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Static Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        uses: ./.github/actions/terraform-static-analysis

  terraform-plan:
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    name: "📝Terraform Plan"
    runs-on: ubuntu-latest
    # Ensure that the Terraform Plan is performed only when there is a pull request
    if: ${{ contains(github.event, 'pull_request') }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-to-assume: "arn:aws:iam::${{secrets.ACCOUNT_NUMBER}}:role/github-actions"
          role-session-name: githubactionsrolesession

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Run Terraform Plan
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git_dir=`git rev-parse --show-toplevel`

          if [ ! -z ${{ github.event.pull_request.number }} ]
          then
            bash scripts/terraform-init.sh "terraform/environments/example"

            # Select workspace
            terraform -chdir="terraform/environments/example" workspace select dev

            # Terraform Plan
            PLAN=`bash scripts/terraform-plan.sh terraform/environments/example | tee /dev/stderr | grep '^Plan: \|^No changes.'`

            bash scripts/comment-pr.sh "${PLAN}"
          fi

  terratest:
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    name: "🧪Terratest"
    runs-on: ubuntu-latest
    # Ensure that the Terratest is performed only when there is a pull request
    if: ${{ contains(github.event, 'pull_request') }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-to-assume: "arn:aws:iam::${{secrets.ACCOUNT_NUMBER}}:role/github-actions"
          role-session-name: githubactionsrolesession

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Run Terratest
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git_dir=`git rev-parse --show-toplevel`

          if [ ! -z ${{ github.event.pull_request.number }} ]
          then
            
            bash scripts/terraform-init.sh "terraform/environments/example"

            # Select workspace
            terraform -chdir="terraform/environments/example" workspace select dev

            pushd "${git_dir}/terraform/environments/example/tests"

            # Install go
            wget -q https://dl.google.com/go/go1.20.3.linux-amd64.tar.gz
            tar -zxvf go1.20.3.linux-amd64.tar.gz
            sudo mv go /usr/local

            # Run Terratest
            TEST=`/usr/local/go/bin/go test | tee /dev/stderr | tail -n 1`
            
            if [ -n "$TEST" ]; then
              TEST="> TERRATEST RESULT - example
              ${TEST}"
              bash scripts/comment-pr.sh "${TEST}"
            fi
          fi

  terraform-apply:
    permissions:
      contents: read
      id-token: write
    name: "🚀Terraform Apply"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-2
          role-to-assume: "arn:aws:iam::${{secrets.ACCOUNT_NUMBER}}:role/github-actions"
          role-session-name: githubactionsrolesession

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Apply
        run: |
          git_dir=`git rev-parse --show-toplevel`

          bash scripts/terraform-init.sh "terraform/environments/example"

          # Select workspace
          terraform -chdir="terraform/environments/example" workspace select dev

          # Run Terraform Apply
          bash scripts/terraform-apply.sh terraform/environments/example
  
      - name: Slack failure notification
        uses: slackapi/slack-github-action@v1.24.0
          payload: |
            {"blocks":[{"type": "section","text": {"type": "mrkdwn","text": ":no_entry: Failed GitHub Action:"}},{"type": "section","fields":[{"type": "mrkdwn","text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"},{"type": "mrkdwn","text": "*Job:*\n${{ github.job }}"},{"type": "mrkdwn","text": "*Repo:*\n${{ github.repository }}"}]}]}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        if: ${{ failure() }}